var searchIndex = {};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[1,"Url","","The parsed representation of an absolute URL."],[11,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",0],[11,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",0],[11,"query","","The query string of the URL.",0],[11,"fragment","","The fragment identifier of the URL.",0],[1,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[11,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",1],[11,"password","","The password of the URL.",1],[11,"host","","The host of the URL, either a domain name or an IPv4 address",1],[11,"port","","The port number of the URL, in ASCII decimal,\nor the empty string for no port number (in the file scheme) or the default port number.",1],[11,"path","","The path of the URL, as vector of pecent-encoded strings.",1],[1,"Ipv6Address","","A 128 bit IPv6 address"],[11,"pieces","","",2],[1,"UrlParser","","A set of optional parameters for URL parsing."],[1,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded."],[2,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[12,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP.",3],[12,"NonRelativeSchemeData","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",3],[2,"Host","","The host name of an URL."],[12,"Domain","","A (DNS) domain name or an IPv4 address.",4],[12,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",4],[2,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[12,"NonRelativeScheme","","Indicate that the scheme is *non-relative*.",5],[12,"RelativeScheme","","Indicate that the scheme is *relative*, and what the default port number is.",5],[12,"FileLikeRelativeScheme","","Indicate a *relative* scheme similar to the *file* scheme.",5],[3,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[3,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[3,"percent_encode","","Percent-encode the given bytes."],[3,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[3,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[3,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[3,"percent_decode","","Percent-decode the given bytes."],[3,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[0,"form_urlencoded","","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[3,"parse_str","url::form_urlencoded","Convert a string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"parse_bytes","","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[3,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[3,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[3,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[3,"decode","","Convert Punycode to Unicode."],[3,"encode_str","","Convert an Unicode `str` to Punycode."],[3,"encode","","Convert Unicode to Punycode."],[4,"ParseResult","url",""],[4,"ErrorHandler","","This is called on non-fatal parse errors."],[5,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[5,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[5,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[5,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[5,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[5,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[5,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[10,"clone","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",2],[10,"eq","","",2],[10,"hash","","",0],[10,"new","","Return a new UrlParser with default parameters.",6],[10,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",6],[10,"query_encoding_override","","Set the character encoding the query string is encoded as before percent-encoding,\nand return the `UrlParser`.",6],[10,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",6],[10,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",6],[10,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",6],[10,"eq","","",5],[10,"ne","","",5],[10,"parse","","Parse an URL with the default `UrlParser` parameters.",0],[10,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",0],[10,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",0],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",0],[10,"serialize","","Return the serialization of this URL as a string.",0],[10,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",0],[10,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",0],[10,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",0],[10,"username","","If the URL is in a *relative scheme*, return its username.",0],[10,"lossy_precent_decode_username","","Percent-decode the URL’s username, if any.",0],[10,"password","","If the URL is in a *relative scheme*, return its password, if any.",0],[10,"lossy_precent_decode_password","","Percent-decode the URL’s password, if any.",0],[10,"host","","If the URL is in a *relative scheme*, return its structured host.",0],[10,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",0],[10,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",0],[10,"port","","If the URL is in a *relative scheme*, return its port.",0],[10,"path","","If the URL is in a *relative scheme*, return its path components.",0],[10,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",0],[10,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",0],[10,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",0],[10,"lossy_precent_decode_query","","Percent-decode the URL’s query string, if any.",0],[10,"lossy_precent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",0],[10,"fmt","","",0],[10,"fmt","","",3],[10,"lossy_precent_decode_username","","Percent-decode the URL’s username.",1],[10,"lossy_precent_decode_password","","Percent-decode the URL’s password, if any.",1],[10,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[10,"domain","","If the host is a domain, return the domain as a string.",1],[10,"serialize_path","","Serialize the path as a string.",1],[10,"fmt","","",1],[10,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",4],[10,"serialize","","Serialize the host as a string.",4],[10,"fmt","","",4],[10,"parse","","Parse an IPv6 address, without the [] square brackets.",2],[10,"serialize","","Serialize the IPv6 address to a string.",2],[10,"fmt","","",2]],"paths":[[1,"Url"],[1,"RelativeSchemeData"],[1,"Ipv6Address"],[2,"SchemeData"],[2,"Host"],[2,"SchemeType"],[1,"UrlParser"]]};
initSearch(searchIndex);
